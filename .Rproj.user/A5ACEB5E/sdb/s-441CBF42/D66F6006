{
    "collab_server" : "",
    "contents" : "\n# import packages\nlibrary(raster)\nlibrary(parallel)\nlibrary(rgdal)\nlibrary(gdalUtils)\nlibrary(stringr)\nlibrary(zoo)\n\n# set root paths for data and code\npath <- '/home/xiao/XWorkSpace/qianshan/Data2'\ncodePath <- '/home/xiao/XWorkSpace/qianshan/Program/LaTiP'\n\n# set the number of CPU cores to analyze series data\nseries_cores <- 14\n\n# set the number of CPU cores to preprocess image files\nfiles_pro_cores <- 12\n\n\n# import function files\nsource(file.path(codePath,'calculator_vis.R'))\nsource(file.path(codePath,'multicore_operate.R'))\nsource(file.path(codePath,'process.R'))\nsource(file.path(codePath,'process_batch.R'))\nsource(file.path(codePath,'sr_to_vi.R'))\nsource(file.path(codePath,'time_stack.R'))\nsource(file.path(codePath,'get_scene_info.R'))\n\n# define work directories\ninDir <- file.path(path, 'in')\ntmpDir <- file.path(path, 'temp')\nstepDir <- file.path(path, 'step')\nuserDir <- file.path(path, 'user')\noutDir <- file.path(path, 'out')\ntest_r <- raster(file.path(userDir, 'l8_targetarea.tif'))\ntest_e <- extent(test_r)\n\n# define operators\n# opera_str <- c('stack_mean', 'fit_tri', 'fit_poly2', 'fit_poly3')\nopera_str <- c('fit_tri_en')\n\nitemList <- c('sr_blue','sr_green','sr_red','sr_nir','sr_swir1','sr_swir2')\n\nfor (file_str in itemList){\n  \n  t1 <- Sys.time()\n  \n  print(paste('begin: ',file_str, sep = \"\"))\n  \n  indexsDir <- file.path(stepDir, file_str)\n  \n  # create work directories\n  for (i in c(tmpDir, inDir, stepDir, indexsDir, outDir)) {\n    dir.create(i, showWarnings = FALSE)\n  }\n  \n  # output path of intermediate results\n  stack_str<- paste(file_str,'_stack.grd', sep = \"\")\n\n  # batch processing\n  process_batch(x = inDir, outdir = indexsDir, srdir = tmpDir, delete = TRUE, \n                mask = 'fmask', vi = file_str, e=test_e, mc.cores=files_pro_cores)\n  \n  # generating the time series .grd file\n  indexsStack <- time_stack(x = indexsDir, pattern = '^.*\\\\.grd$', \n                            filename = file.path(stepDir, stack_str), datatype = 'INT2S')\n  \n  # analyze time series data\n  for (i_opera in opera_str) {\n\n    tifDir <- file.path(outDir, paste(file_str, '_', i_opera, '.tif', sep = \"\"))\n    \n    t2 <- Sys.time()\n    \n    # perform analysis in a parallel manner\n    resultBrick <- multicore_operate(indexsStack, i_opera, series_cores)\n      \n    t3 <- Sys.time()\n    t_3_2 <- t3 - t2\n    \n    # output final result\n    writeRaster(resultBrick, filename=tifDir, format=\"GTiff\", overwrite=TRUE, bandorder='BIL')\n    \n    print(paste('....',i_opera, ' cost time ', as.character(t_3_2), sep = \"\"))\n  }\n\n\n  \n  \n  \n  \n  \n  # # output path of fitting failed data\n  # csvPath <- file.path(outDir, paste(file_str,'_failedPos.tif', sep = \"\"))\n  \n  # # check points where the fitting fails\n  # fitNAlist <- list()\n  # for (i in 1:dim(fittedBrick)[1]){\n  #   for (j in 1:dim(fittedBrick)[2]){\n  #     fitvector <- fittedBrick[i,j,]\n  #     if(sum(is.na(fitvector)) > 0){\n  #       fitNAlist <- c(fitNAlist,list(c(i,j)))\n  #     }\n  #   }\n  # }\n  \n  # # output locations of fitting failed points\n  # if (length(fitNAlist)>0){\n  #   failedPosMatrix <- matrix(nrow=length(fitNAlist), ncol=length(fitNAlist[[1]]), byrow = TRUE)\n  #   for (i in 1:length(fitNAlist)){\n  #     for (j in 1:length(fitNAlist[[1]])){\n  #       failedPosMatrix[i,j] <- fitNAlist[[i]][j]\n  #     }\n  #   }\n  #   write.table(failedPosMatrix, file = csvPath, col.names = FALSE, row.names = FALSE, sep = ',')\n  # }\n  \n  t4 <- Sys.time()\n  t_4_1 <- t4 - t1\n  \n  print(paste(file_str, ' total time ', as.character(t_4_1), sep = \"\"))\n  \n}\n",
    "created" : 1502852677641.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "201556355",
    "id" : "D66F6006",
    "lastKnownWriteTime" : 1504064452,
    "last_content_update" : 1504064452269,
    "path" : "~/XWorkSpace/qianshan/Program/LaTiP/main.R",
    "project_path" : "main.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}